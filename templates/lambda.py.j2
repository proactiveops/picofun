"""Generated AWS Lambda function for making an API call."""

from typing import Any

import requests
from aws_lambda_powertools import Logger
from aws_lambda_powertools.utilities.typing import LambdaContext

{% if preprocessor %}import {{preprocessor}}
{% endif %}{% if postprocessor %}import {{postprocessor}}
{% endif %}
logger = Logger()


class ApiError(Exception):

    """Exception raised when an API call fails."""

    def __init__(self, message: str, status_code: int) -> None:
        """Construct an ApiError."""
        super().__init__(f"Error {status_code}: {message}")
        self.status_code = status_code


class ApiRequestArgs:

    """Arguments for making an API call with requests."""

    def __init__(
        self,
        path: dict[str, Any] | None = None,
        query: dict[str, Any] | None = None,
        payload: dict[str, Any] | None = None,
        headers: dict[str, Any] | None = None,
    ) -> None:
        """Construct an object with the arguments for the API call."""
        self.path = path
        self.query = query
        self.json = payload
        self.headers = headers

    def to_kwargs(self) -> dict[str, Any]:
        """Convert the object to a dictionary of keyword arguments for requests."""
        output = {}
        for property in ["headers", "json", "query"]:
            if getattr(self, property):
                output[property] = getattr(self, property)
        return output


@logger.inject_lambda_context
def handler(event: dict[str, Any], context: LambdaContext) -> dict[str, Any]:
    """{{ details.summary | default('') }}."""
    properties = ApiRequestArgs(**event)
    {% if preprocessor_handler %}properties = {{preprocessor_handler}}(args){% endif %}
    url = "{{ base_url }}{{ path }}".format(**properties.path)

    timeout = context.get_remaining_time_in_millis() - 1000
    response = requests.{{ method }}(url, timeout=timeout, **properties.to_kwargs())
    {% if postprocessor_handler %}response = {{postprocessor_handler}}(response){% endif %}

    if response.status_code >= 400:
        logger.error("Error %d: %s", response.status_code, response.text)
        raise ApiError(response.text, response.status_code)

    return {
        "body": response.text,
        "headers": response.headers,
        "statusCode": response.status_code,
    }